declare name "Digital Reverbs Library";
declare author "Luca Spanedda";
declare version "1.0";
declare description "2023";
declare copyright "Copyright (C) 2023 Luca Spanedda <lucaspanedda1995@gmail.com>";
declare license "MIT license";
// Import the standard Faust Libraries
import("stdfaust.lib");

//---------------------------------------------------------- BASIC FUNCTIONS ---
// Dirac Impulse with delay lines - Impulse at Compile Time
dirac = 1 - 1';
// process = dirac, dirac;

// (t) = give time in milliseconds we want to know in samples
mstosamps(t) = (ma.SR/1000) * t : int;

// (samps) = give tot. samples we want to know in milliseconds
sampstoms(samps) = ((1000/ma.SR) * samps) : int;

// (meters) = give a distance in meters for samples of the filter
meterstosamps(meters) = ((ma.SR/1000.) * ((1000*meters)/343.1) * 2);

// (samps,seconds) = give: samples of the filter, seconds we want for t60 decay
T60samps(samps, seconds) = 1/(10^((3*(((1000 / ma.SR)*samps)/1000))/seconds));

// (ms,seconds) = give: ms delay of the filter, seconds we want for t60 decay
T60ms(ms,seconds) = 1/(10^((3*(ms/1000))/seconds));

//----------------------------------------------------------- NOISE with LCG ---
// pseudo-random noise with linear congruential generator (LCG)
noise(initSeed) = LCG ~ _ : (_ / m)
with{
    // variables
    // initSeed = an initial seed value
    a = 18446744073709551557; // a large prime number, such as 18446744073709551557
    c = 12345; // a small prime number, such as 12345
    m = 2 ^ 31; // 2.1 billion
    // linear_congruential_generator
    LCG(seed) = ((a * seed + c) + (initSeed-initSeed') % m);
};
//process = noise(12345839), noise(22346889);

//--------------------------------------------- ONEZERO FILTER (FIR of I째 Order)
// (g) = give amplitude 0-1(open-close) to the delayed signal 
// (g) = +1 lowpass, (g) = -1 highpass
ozf(g, x) = (x' * g), x :> +;
//process = no.noise : ozf(hslider("HP/LP",0, -1, +1, .001));

//--------------------------------------- ONEPOLE FILTER (IIR of 1 sample delay)
// (g) = give amplitude 1-0(open-close) for the lowpass cut
opf(g, x) = x * g : + ~ (_ : * (1 - g));
// only the pole section
pole(g) = + ~ * (g);
//process = no.noise : opf(.01);
//process = no.noise * .001 : op(.99);

// (G)  = give amplitude 1-0 (open-close) for the lowpass cut
// (CF) = Frequency Cut in HZ
onepole(CF, x) = loop ~ _ 
    with{
        g(x) = x / (1.0 + x);
        G = tan(CF * ma.PI / ma.SR):g;
        loop(y) = x * G + (y * (1 - G));
        };
//process = no.noise : onepole(10);

//----------------------------------------------------------- ONEPOLE TPT FILTER
opfTPT(CF,x) = circuit ~ _ : ! , _
    with {
        g = tan(CF * ma.PI / ma.SR);
        G = g / (1.0 + g);
        circuit(sig) = u , lp
            with {
                v = (x - sig) * G;
                u = v + lp;
                lp = v + sig;
            };
    };
//process = no.noise : opfTPT(100);

//------------------------------------ FEEDFORWARD COMB FILTER (FIR of N째 Order)
// (t, g) = delay time in samples, filter gain 0-1
ffcf(t, g, x) = (x@(t) * g), x :> +;
//process = no.noise * .1 : ffcf(100, 1);

//--------------------------------------- FEEDBACK COMB FILTER (FIR of N째 Order)
// (del, g) = DEL=delay time in samples. G=feedback gain 0-1
fbcf(del, g, x) = loop ~ _ 
    with {
        loop(y) = x + y@(del - 1) * g;
    };
//process = no.noise * .1 : fbcf(4480, .9);

//------------------------------- LOWPASS FEEDBACK COMB FILTER (FIR of N째 Order)
// LPFBC(Del, FCut) = give: delay samps, -feedback gain 0-1-, lowpass Freq.Cut HZ
lpfbcf(del, cf, x) = loop ~ _ : !, _
    with {
        onepole(CF, x) = loop ~ _ 
            with{
                g(x) = x / (1.0 + x);
                G = tan(CF * ma.PI / ma.SR):g;
                loop(y) = x * G + (y * (1 - G));
            };
        loop(y) = x + y@(del - 1) <: onepole(cf), _;
    };
//process = _ * .1 : lpfbcf(2000, 10000);

//--------------------------------------------------------------- ALLPASS FILTER
// (t, g) = give: delay in samples, feedback gain 0-1
apf(del, g, x) = x : (+ : _ <: @(del-1), *(g))~ *(-g) : mem, _ : + : _;
//process = no.noise * .1 <: apf(100, .5);

//----------------------------------------------------- MODULATED ALLPASS FILTER
// Modulated Allpass filter
modapf(delsamples, samplesmod, freqmod, apcoeff) = ( + : _ <: 
    delayMod(delsamples, samplesmod, freqmod),
    * (apcoeff))~ * (-apcoeff) : mem, _ : + : _
    with{
        delayMod(samples, samplesMod, freqMod, x) = delay
        with{
            unipolarMod(f, samples) = ((os.osc(f) + 1) / 2) * samples;
            delay = x : de.fdelay(samples, samples - unipolarMod(freqMod, samplesMod));
        };
    };
//process = 1-1' : +@(ma.SR/100) ~ _ <: _, modapf(1000, 500, .12, .5);

//------------------------------------------------------------------- DC BLOCKER
// https://ccrma.stanford.edu/~jos/fp/DC_Blocker.html
dcblocker = ozf(-1) : pole(0.998);
